(correlation <- cor(edu[, 4:29]))
# 相关性分析
correlation <- cor(edu[, 4:29])
symnum(correlation, abrr.colnames = F)
# 相关性分析
correlation <- cor(edu[, 4:29])
symnum(correlation)
# 相关性分析
correlation <- cor(edu[, 4:29])
symnum(correlation, abbr.colnames = T)
# 相关性分析
correlation <- cor(edu[, 4:29])
symnum(correlation, abbr.colnames = T, abbr.rowname = T)
# 相关性分析
correlation <- cor(edu[, 4:29])
symnum(correlation, abbr.colnames = T, row.names(4:29))
# 相关性分析
correlation <- cor(edu[, 4:29])
symnum(correlation, abbr.colnames = T, row.names(4:30))
# 相关性分析
correlation <- cor(edu[, 4:29])
symnum(correlation, abbr.colnames = T)
# 相关性分析
correlation <- cor(edu[, 4:29])
symnum(correlation, abbr.colnames = T)
library(corrplot)
# 相关性分析
correlation <- cor(edu[, 4:29])
symnum_res <- symnum(correlation, abbr.colnames = T)
require(corrplot)
corrplot(correlation, method = "circle")
corrplot(correlation, method = "ellipse")
corrplot(correlation, method = "pie")
corrplot(correlation, method = "color")
corrplot(correlation, method = "number")
corrplot(correlation, method = "upper")
# 相关性分析
correlation <- cor(edu[, 4:29])
symnum_res <- symnum(correlation, abbr.colnames = T)
require(corrplot)
corrplot(correlation, method = "circle")
corrplot(correlation, method = "ellipse")
corrplot(correlation, method = "pie")
corrplot(correlation, method = "color")
corrplot(correlation, method = "number")
corrplot(correlation, method = "upper")
# 相关性分析
correlation <- cor(edu[, 4:29])
symnum_res <- symnum(correlation, abbr.colnames = T)
require(corrplot)
corrplot(correlation, method = "circle")
corrplot(correlation, method = "ellipse")
corrplot(correlation, method = "pie")
corrplot(correlation, method = "color")
corrplot(correlation, method = "number")
corrplot(correlation, type = "lower")
corrplot(correlation, type = "upper")
corrplot(correlation, order = "hclust")
corrplot(correlation, type = "upper", order = "hclust", col = c("darkorange", "steelblue"),bg = "lightgreen")
cor1 <- rcorr(as.matrix(edu[, 4:29]))
# 相关性分析
correlation <- cor(edu[, 4:29])
symnum_res <- symnum(correlation, abbr.colnames = T)
require(corrplot)
corrplot(correlation, type = "upper", order = "hclust", col = c("darkorange", "steelblue"),bg = "lightgreen")
# 相关性分析
correlation <- cor(edu[, 4:29])
symnum_res <- symnum(correlation, abbr.colnames = T)
require(corrplot)
library(Hmisc)
corrplot(correlation, type = "upper", order = "hclust", col = c("darkorange", "steelblue"),bg = "lightgreen")
cor_1 <- rcorr(as.matrix(edu[, 4:29]))
M <- cor_1$r
p_mat <- cor_1$P
corrplot(M, type = "upper", order = "hclust", p.mat = p_mat, sig.level = 0.01)
# 数据预处理
# 检测缺失值
any(is.na(edu))
# 数据标准化
numeric_vars <- c("Unemployment_Rate", "Gross_Tertiary_Education_Enrollment")
edu[numeric_vars] <- scale(edu[numeric_vars])
# 列名简短
# 列名修改对应的映射字典
col_mapping <- c(
"Countries and Areas" = "Country/Region",
"Latitude" = "Latitude",
"Longitude" = "Longitude",
"OOSR_Pre0Primary_Age_Male" = "OOSR_PrePrimary_Male",
"OOSR_Pre0Primary_Age_Female" = "OOSR_PrePrimary_Female",
"OOSR_Primary_Age_Male" = "OOSR_Primary_Male",
"OOSR_Primary_Age_Female" = "OOSR_Primary_Female",
"OOSR_Lower_Secondary_Age_Male" = "OOSR_LowerSecondary_Male",
"OOSR_Lower_Secondary_Age_Female" = "OOSR_LowerSecondary_Female",
"OOSR_Upper_Secondary_Age_Male" = "OOSR_UpperSecondary_Male",
"OOSR_Upper_Secondary_Age_Female" = "OOSR_UpperSecondary_Female",
"Completion_Rate_Primary_Male" = "Completion_Primary_Male",
"Completion_Rate_Primary_Female" = "Completion_Primary_Female",
"Completion_Rate_Lower_Secondary_Male" = "Completion_LowerSecondary_Male",
"Completion_Rate_Lower_Secondary_Female" = "Completion_LowerSecondary_Female",
"Completion_Rate_Upper_Secondary_Male" = "Completion_UpperSecondary_Male",
"Completion_Rate_Upper_Secondary_Female" = "Completion_UpperSecondary_Female",
"Grade_2_3_Proficiency_Reading" = "Proficiency_G2_G3_Reading",
"Grade_2_3_Proficiency_Math" = "Proficiency_G2_G3_Math",
"Primary_End_Proficiency_Reading" = "Proficiency_Primary_Reading",
"Primary_End_Proficiency_Math" = "Proficiency_Primary_Math",
"Lower_Secondary_End_Proficiency_Reading" = "Proficiency_LowerSecondary_Reading",
"Lower_Secondary_End_Proficiency_Math" = "Proficiency_LowerSecondary_Math",
"Youth_15_24_Literacy_Rate_Male" = "Youth_LiteracyRate_Male",
"Youth_15_24_Literacy_Rate_Female" = "Youth_LiteracyRate_Female",
"Birth_Rate" = "BirthRate",
"Gross_Primary_Education_Enrollment" = "Enrollment_Primary",
"Gross_Tertiary_Education_Enrollment" = "Enrollment_Tertiary",
"Unemployment_Rate" = "UnemploymentRate"
)
# 修改列名
colnames(edu) <- col_mapping
# 数据预处理
# 检测缺失值
any(is.na(edu))
# 数据标准化
numeric_vars <- c("Unemployment_Rate", "Gross_Tertiary_Education_Enrollment")
edu[numeric_vars] <- scale(edu[numeric_vars])
# 数据预处理
# 检测缺失值
any(is.na(edu))
# 数据标准化
# numeric_vars <- c("失业率", "高教总入学率")
# edu[numeric_vars] <- scale(edu[numeric_vars])
# 列名简短
# 列名修改对应的映射字典
col_mapping <- c(
"Countries and Areas" = "地区",
"Latitude" = "纬度",
"Longitude" = "经度",
"OOSR_Pre0Primary_Age_Male" = "学前失学率男",
"OOSR_Pre0Primary_Age_Female" = "学前失学率女",
"OOSR_Primary_Age_Male" = "小学失学率男",
"OOSR_Primary_Age_Female" = "小学失学率女",
"OOSR_Lower_Secondary_Age_Male" = "初中失学率男",
"OOSR_Lower_Secondary_Age_Female" = "初中失学率女",
"OOSR_Upper_Secondary_Age_Male" = "高中失学率男",
"OOSR_Upper_Secondary_Age_Female" = "高中失学率女",
"Completion_Rate_Primary_Male" = "小学完成率男",
"Completion_Rate_Primary_Female" = "小学完成率女",
"Completion_Rate_Lower_Secondary_Male" = "初中完成率男",
"Completion_Rate_Lower_Secondary_Female" = "初中完成率女",
"Completion_Rate_Upper_Secondary_Male" = "高中完成率男",
"Completion_Rate_Upper_Secondary_Female" = "高中完成率女",
"Grade_2_3_Proficiency_Reading" = "23年纪阅读",
"Grade_2_3_Proficiency_Math" = "23年纪数学",
"Primary_End_Proficiency_Reading" = "小学结束阅读",
"Primary_End_Proficiency_Math" = "小学结束数学",
"Lower_Secondary_End_Proficiency_Reading" = "初中结束阅读",
"Lower_Secondary_End_Proficiency_Math" = "初中结束阅读",
"Youth_15_24_Literacy_Rate_Male" = "青年识字率男",
"Youth_15_24_Literacy_Rate_Female" = "青年识字率女",
"Birth_Rate" = "出生率",
"Gross_Primary_Education_Enrollment" = "小教总入学率",
"Gross_Tertiary_Education_Enrollment" = "高教总入学率",
"Unemployment_Rate" = "失业率"
)
# 修改列名
colnames(edu) <- col_mapping
summary(edu)
# 相关性分析
correlation <- cor(edu[, 4:29])
symnum_res <- symnum(correlation, abbr.colnames = T)
require(corrplot)
library(Hmisc)
corrplot(correlation, type = "upper", order = "hclust", col = c("darkorange", "steelblue"),bg = "lightgreen")
cor_1 <- rcorr(as.matrix(edu[, 4:29]))
M <- cor_1$r
p_mat <- cor_1$P
corrplot(M, type = "upper", order = "hclust", p.mat = p_mat, sig.level = 0.01)
# 相关性分析
correlation <- cor(edu[, 4:29])
symnum_res <- symnum(correlation)
require(corrplot)
library(Hmisc)
corrplot(correlation, type = "upper", order = "hclust", col = c("darkorange", "steelblue"),bg = "lightgreen")
cor_1 <- rcorr(as.matrix(edu[, 4:29]))
M <- cor_1$r
p_mat <- cor_1$P
corrplot(M, type = "upper", order = "hclust", p.mat = p_mat, sig.level = 0.01)
# 相关性分析
correlation <- cor(edu[, 4:29])
symnum_res <- symnum(correlation)
require(corrplot)
library(Hmisc)
corrplot(correlation, type = "upper", order = "hclust", col = c("darkorange", "steelblue"),bg = "lightgreen")
cor_1 <- rcorr(as.matrix(edu[, 4:29]))
M <- cor_1$r
p_mat <- cor_1$P
corrplot(M, type = "upper", order = "hclust", p.mat = p_mat, sig.level = 0.01, tl.cex = 0.7)
# 相关性分析
correlation <- cor(edu[, 4:29])
symnum_res <- symnum(correlation)
require(corrplot)
library(Hmisc)
corrplot(correlation, type = "upper", order = "hclust", col = c("darkorange", "steelblue"),bg = "lightgreen")
cor_1 <- rcorr(as.matrix(edu[, 4:29]))
M <- cor_1$r
p_mat <- cor_1$P
corrplot(M, type = "upper", order = "hclust", p.mat = p_mat, sig.level = 0.01, tl.cex = 0.7, pch.cex = 0.7)
# 相关性分析
require(corrplot)
library(Hmisc)
correlation <- cor(edu[, 4:29])
symnum_res <- symnum(correlation)
cor_1 <- rcorr(as.matrix(edu[, 4:29]))
M <- cor_1$r
p_mat <- cor_1$P
# tl.cex 调整字体大小
# pch.cex 调整叉叉大小
corrplot(M, type = "upper", order = "hclust", p.mat = p_mat, sig.level = 0.01, tl.cex = 0.7, pch.cex = 0.7)
nrow(edu)
# 假设 correlation 是你计算得到的相关性矩阵
# 假设 edu 是你的数据框
# 获取最后两列与其他列的相关系数
last_col <- ncol(correlation)
cor_last_col <- correlation[, last_col - 1]  # 倒数第二列
cor_second_last_col <- correlation[, last_col]  # 倒数第一列
# 设置阈值，定义强相关的阈值（可以根据需要进行调整）
threshold <- 0.7
# 选出与倒数第一列和倒数第二列具有强相关性的其他列名
strong_correlated_vars <- names(which(abs(cor_last_col) > threshold | abs(cor_second_last_col) > threshold))
# 排除倒数第一列和倒数第二列本身
strong_correlated_vars <- strong_correlated_vars[!strong_correlated_vars %in% names(correlation)]
# 输出具有强相关性的列名
print(strong_correlated_vars)
# 假设 correlation 是你计算得到的相关性矩阵
# 假设 edu 是你的数据框
# 获取最后两列与其他列的相关系数
last_col <- ncol(correlation)
(cor_last_col <- correlation[, last_col - 1]) # 倒数第二列
(cor_second_last_col <- correlation[, last_col])  # 倒数第一列
# 设置阈值，定义强相关的阈值（可以根据需要进行调整）
threshold <- 0.7
# 选出与倒数第一列和倒数第二列具有强相关性的其他列名
strong_correlated_vars <- names(which(abs(cor_last_col) > threshold | abs(cor_second_last_col) > threshold))
# 排除倒数第一列和倒数第二列本身
strong_correlated_vars <- strong_correlated_vars[!strong_correlated_vars %in% names(correlation)]
# 输出具有强相关性的列名
print(strong_correlated_vars)
# 假设 correlation 是你计算得到的相关性矩阵
# 假设 edu 是你的数据框
# 获取最后两列与其他列的相关系数
(last_col <- ncol(correlation))
(cor_last_col <- correlation[, last_col - 1]) # 倒数第二列
(cor_second_last_col <- correlation[, last_col])  # 倒数第一列
# 设置阈值，定义强相关的阈值（可以根据需要进行调整）
threshold <- 0.7
# 选出与倒数第一列和倒数第二列具有强相关性的其他列名
strong_correlated_vars <- names(which(abs(cor_last_col) > threshold | abs(cor_second_last_col) > threshold))
# 排除倒数第一列和倒数第二列本身
strong_correlated_vars <- strong_correlated_vars[!strong_correlated_vars %in% names(correlation)]
# 输出具有强相关性的列名
print(strong_correlated_vars)
# 获取最后两列与其他列的相关系数
(col_count <- ncol(correlation))
(enroll <- correlation[, col_count - 1]) # 倒数第二列 高等教育入学率
(unemploy <- correlation[, col_count])  # 倒数第一列 失业率
# 设置阈值
threshold <- 0.7
enroll_strong_correlated_vars <- names(which(abs(enroll) > threshold))
unemploy_strong_correlated_vars <- names(which(abs(unemploy) > threshold))
# 排除倒数第一列和倒数第二列本身
# enroll_strong_correlated_vars <- enroll_strong_correlated_vars[!enroll_strong_correlated_vars %in% names(correlation)]
# 输出具有强相关性的列名
enroll_strong_correlated_vars
unemploy_strong_correlated_vars
# 数据预处理
# 检测缺失值
any(is.na(edu))
# 数据标准化
# numeric_vars <- c("失业率", "高教总入学率")
# edu[numeric_vars] <- scale(edu[numeric_vars])
# 列名简短
# 列名修改对应的映射字典
col_mapping <- c(
"Countries and Areas" = "地区",
"Latitude" = "纬度",
"Longitude" = "经度",
"OOSR_Pre0Primary_Age_Male" = "学前失学率男",
"OOSR_Pre0Primary_Age_Female" = "学前失学率女",
"OOSR_Primary_Age_Male" = "小学失学率男",
"OOSR_Primary_Age_Female" = "小学失学率女",
"OOSR_Lower_Secondary_Age_Male" = "初中失学率男",
"OOSR_Lower_Secondary_Age_Female" = "初中失学率女",
"OOSR_Upper_Secondary_Age_Male" = "高中失学率男",
"OOSR_Upper_Secondary_Age_Female" = "高中失学率女",
"Completion_Rate_Primary_Male" = "小学完成率男",
"Completion_Rate_Primary_Female" = "小学完成率女",
"Completion_Rate_Lower_Secondary_Male" = "初中完成率男",
"Completion_Rate_Lower_Secondary_Female" = "初中完成率女",
"Completion_Rate_Upper_Secondary_Male" = "高中完成率男",
"Completion_Rate_Upper_Secondary_Female" = "高中完成率女",
"Grade_2_3_Proficiency_Reading" = "23年级阅读",
"Grade_2_3_Proficiency_Math" = "23年级数学",
"Primary_End_Proficiency_Reading" = "小学结束阅读",
"Primary_End_Proficiency_Math" = "小学结束数学",
"Lower_Secondary_End_Proficiency_Reading" = "初中结束阅读",
"Lower_Secondary_End_Proficiency_Math" = "初中结束数学",
"Youth_15_24_Literacy_Rate_Male" = "青年识字率男",
"Youth_15_24_Literacy_Rate_Female" = "青年识字率女",
"Birth_Rate" = "出生率",
"Gross_Primary_Education_Enrollment" = "小教总入学率",
"Gross_Tertiary_Education_Enrollment" = "高教总入学率",
"Unemployment_Rate" = "失业率"
)
# 修改列名
colnames(edu) <- col_mapping
# 相关性分析
require(corrplot)
library(Hmisc)
correlation <- cor(edu[, 4:29])
symnum_res <- symnum(correlation)
cor_1 <- rcorr(as.matrix(edu[, 4:29]))
M <- cor_1$r
p_mat <- cor_1$P
# tl.cex 调整字体大小
# pch.cex 调整叉叉大小
corrplot(M, type = "upper", order = "hclust", p.mat = p_mat, sig.level = 0.01, tl.cex = 0.7, pch.cex = 0.7)
# 相关性分析
require(corrplot)
library(Hmisc)
correlation <- cor(edu[, 4:29])
symnum_res <- symnum(correlation)
cor_1 <- rcorr(as.matrix(edu[, 4:29]))
M <- cor_1$r
p_mat <- cor_1$P
# tl.cex 调整字体大小
# pch.cex 调整叉叉大小
corrplot(M, type = "upper", order = "hclust", p.mat = p_mat, sig.level = 0.01, tl.cex = 0.7, pch.cex = 0.7)
# 获取最后两列与其他列的相关系数
(col_count <- ncol(correlation))
(enroll <- correlation[, col_count - 1]) # 倒数第二列 高等教育入学率
(unemploy <- correlation[, col_count])  # 倒数第一列 失业率
# 设置阈值
threshold <- 0.7
enroll_strong_correlated_vars <- names(which(abs(enroll) > threshold))
unemploy_strong_correlated_vars <- names(which(abs(unemploy) > threshold))
# 排除倒数第一列和倒数第二列本身
# enroll_strong_correlated_vars <- enroll_strong_correlated_vars[!enroll_strong_correlated_vars %in% names(correlation)]
# 输出具有强相关性的列名
enroll_strong_correlated_vars
unemploy_strong_correlated_vars
# 获取最后两列与其他列的相关系数
(col_count <- ncol(correlation))
(enroll <- correlation[, col_count - 1]) # 倒数第二列 高等教育入学率
(unemploy <- correlation[, col_count])  # 倒数第一列 失业率
# 设置阈值
threshold <- 0.7
enroll_strong_correlated_vars <- names(which(abs(enroll) > threshold))
unemploy_strong_correlated_vars <- names(which(abs(unemploy) > threshold))
# 排除本身
enroll_strong_correlated_vars <- enroll_strong_correlated_vars[!enroll_strong_correlated_vars %in% names(correlation)]
unemploy_strong_correlated_vars <- unemploy_strong_correlated_vars[!unemploy_strong_correlated_vars %in% names(correlation)]
# 输出具有强相关性的列名
enroll_strong_correlated_vars
unemploy_strong_correlated_vars
# 获取最后两列与其他列的相关系数
(col_count <- ncol(correlation))
(enroll <- correlation[, col_count - 1]) # 倒数第二列 高等教育入学率
(unemploy <- correlation[, col_count])  # 倒数第一列 失业率
# 设置阈值
threshold <- 0.7
enroll_strong_correlated_vars <- names(which(abs(enroll) > threshold))
unemploy_strong_correlated_vars <- names(which(abs(unemploy) > threshold))
# 排除本身
enroll_strong_correlated_vars <- setdiff(enroll_strong_correlated_vars, "高教总入学率")
unemploy_strong_correlated_vars <- setdiff(unemploy_strong_correlated_vars, "失业率")
# 输出具有强相关性的列名
enroll_strong_correlated_vars
unemploy_strong_correlated_vars
# 获取最后两列与其他列的相关系数
col_count <- ncol(correlation)
enroll <- correlation[, col_count - 1]  # 倒数第二列 高等教育入学率
unemploy <- correlation[, col_count]   # 倒数第一列 失业率
# 设置阈值
threshold <- 0.7
# 获取强相关的列号
enroll_strong_correlated_cols <- which(abs(enroll) > threshold)
unemploy_strong_correlated_cols <- which(abs(unemploy) > threshold)
# 排除本身
enroll_strong_correlated_cols <- enroll_strong_correlated_cols[!enroll_strong_correlated_cols %in% col_count - 1]
unemploy_strong_correlated_cols <- unemploy_strong_correlated_cols[!unemploy_strong_correlated_cols %in% col_count]
# 输出具有强相关性的列号
enroll_strong_correlated_cols
unemploy_strong_correlated_cols
# 获取最后两列与其他列的相关系数
col_count <- ncol(correlation)
(enroll <- correlation[, col_count - 1])  # 倒数第二列 高等教育入学率
unemploy <- correlation[, col_count]   # 倒数第一列 失业率
# 设置阈值
threshold <- 0.7
# 获取强相关的列号
enroll_strong_correlated_cols <- which(abs(enroll) > threshold)
unemploy_strong_correlated_cols <- which(abs(unemploy) > threshold)
# 排除本身
enroll_strong_correlated_cols <- enroll_strong_correlated_cols[!enroll_strong_correlated_cols %in% col_count - 1]
unemploy_strong_correlated_cols <- unemploy_strong_correlated_cols[!unemploy_strong_correlated_cols %in% col_count]
# 输出具有强相关性的列号
enroll_strong_correlated_cols
unemploy_strong_correlated_cols
# 获取最后两列与其他列的相关系数
col_count <- ncol(correlation)
(enroll <- correlation[, col_count - 1])  # 倒数第二列 高等教育入学率
unemploy <- correlation[, col_count]   # 倒数第一列 失业率
# 设置阈值
threshold <- 0.7
# 获取强相关的列号
(enroll_strong_correlated_cols <- which(abs(enroll) > threshold))
unemploy_strong_correlated_cols <- which(abs(unemploy) > threshold)
# 排除本身
enroll_strong_correlated_cols <- enroll_strong_correlated_cols[!enroll_strong_correlated_cols %in% col_count - 1]
unemploy_strong_correlated_cols <- unemploy_strong_correlated_cols[!unemploy_strong_correlated_cols %in% col_count]
# 输出具有强相关性的列号
enroll_strong_correlated_cols
unemploy_strong_correlated_cols
# 获取最后两列与其他列的相关系数
col_count <- ncol(correlation)
(enroll <- correlation[, col_count - 1])  # 倒数第二列 高等教育入学率
unemploy <- correlation[, col_count]   # 倒数第一列 失业率
# 设置阈值
threshold <- 0.7
# 获取强相关的列号
(enroll_strong_correlated_cols <- which(abs(enroll) > threshold))
(unemploy_strong_correlated_cols <- which(abs(unemploy) > threshold))
# 获取最后两列与其他列的相关系数
col_count <- ncol(correlation)
enroll <- correlation[, col_count - 1]  # 倒数第二列 高等教育入学率
unemploy <- correlation[, col_count]   # 倒数第一列 失业率
# 设置阈值
threshold <- 0.7
# 获取强相关的列号
(enroll_strong_correlated_cols <- which(abs(enroll) > threshold))
(unemploy_strong_correlated_cols <- which(abs(unemploy) > threshold))
# 获取最后两列与其他列的相关系数
col_count <- ncol(correlation)
enroll <- correlation[, col_count - 1]  # 倒数第二列 高等教育入学率
unemploy <- correlation[, col_count]   # 倒数第一列 失业率
# 设置阈值
threshold <- 0.7
# 获取强相关的列号
(enroll_strong_correlated_cols <- which(abs(enroll) > threshold) + 3)
(unemploy_strong_correlated_cols <- which(abs(unemploy) > threshold) + 3)
# 获取最后两列与其他列的相关系数
col_count <- ncol(correlation)
enroll <- correlation[, col_count - 1]  # 倒数第二列 高等教育入学率
unemploy <- correlation[, col_count]   # 倒数第一列 失业率
# 设置阈值
threshold <- 0.7
# 排除自己
enroll_strong_correlated_cols <- setdiff(enroll_strong_correlated_cols, col_count - 1)
unemploy_strong_correlated_cols <- setdiff(unemploy_strong_correlated_cols, col_count)
# 获取强相关的列号
(enroll_strong_correlated_cols <- which(abs(enroll) > threshold) + 3)
(unemploy_strong_correlated_cols <- which(abs(unemploy) > threshold) + 3)
# 获取最后两列与其他列的相关系数
col_count <- ncol(correlation)
enroll <- correlation[, col_count - 1]  # 倒数第二列 高等教育入学率
unemploy <- correlation[, col_count]   # 倒数第一列 失业率
# 设置阈值
threshold <- 0.7
# 排除自己
enroll_strong_correlated_cols <- subset( enroll_strong_correlated_cols, enroll_strong_correlated_cols != col_count - 1)
unemploy_strong_correlated_cols <- subset(unemploy_strong_correlated_cols, unemploy_strong_correlated_cols != col_count)
# 获取强相关的列号
(enroll_strong_correlated_cols <- which(abs(enroll) > threshold) + 3)
(unemploy_strong_correlated_cols <- which(abs(unemploy) > threshold) + 3)
# 获取最后两列与其他列的相关系数
col_count <- ncol(correlation)
enroll <- correlation[, col_count - 1]  # 倒数第二列 高等教育入学率
unemploy <- correlation[, col_count]   # 倒数第一列 失业率
# 设置阈值
threshold <- 0.7
# 获取强相关的列号
enroll_strong_correlated_cols <- which(abs(enroll) > threshold) + 3
unemploy_strong_correlated_cols <- which(abs(unemploy) > threshold) + 3
# 排除自己
(enroll_strong_correlated_cols <- subset( enroll_strong_correlated_cols, enroll_strong_correlated_cols != col_count - 1))
(unemploy_strong_correlated_cols <- subset(unemploy_strong_correlated_cols, unemploy_strong_correlated_cols != col_count))
# 获取最后两列与其他列的相关系数
col_count <- ncol(correlation)
enroll <- correlation[, col_count - 1]  # 倒数第二列 高等教育入学率
unemploy <- correlation[, col_count]   # 倒数第一列 失业率
# 设置阈值
threshold <- 0.7
# 获取强相关的列号
enroll_strong_correlated_cols <- which(abs(enroll) > threshold) + 3
unemploy_strong_correlated_cols <- which(abs(unemploy) > threshold) + 3
# 排除自己
(enroll_strong_correlated_cols <- subset( enroll_strong_correlated_cols, enroll_strong_correlated_cols != col_count - 1))
(unemploy_strong_correlated_cols <- subset(unemploy_strong_correlated_cols, unemploy_strong_correlated_cols != "失业率"))
# 获取最后两列与其他列的相关系数
col_count <- ncol(correlation)
enroll <- correlation[, col_count - 1]  # 倒数第二列 高等教育入学率
unemploy <- correlation[, col_count]   # 倒数第一列 失业率
# 设置阈值
threshold <- 0.7
# 获取强相关的列号
enroll_strong_correlated_cols <- which(abs(enroll) > threshold) + 3
unemploy_strong_correlated_cols <- which(abs(unemploy) > threshold) + 3
# 排除自己
enroll_strong_correlated_cols
unemploy_strong_correlated_cols
enroll_model <- lm(edu[-1] ~ ., data=edu[, 1:2])
enroll_model <- lm(edu$失业率 ~ ., data=edu[, 1:2])
enroll_model <- lm(edu$失业率 ~ ., data=edu[, unemploy_strong_correlated_cols])
data=edu[, unemploy_strong_correlated_cols
# enroll_model <- lm(edu$失业率 ~ ., data=edu[, unemploy_strong_correlated_cols])
